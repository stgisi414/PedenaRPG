// Enhanced Gemini-powered quest generation with structured data
async function generateGeminiQuest() {
    // Get conversation context for quest relevance
    const conversationContext = getConversationContext();
    
    // Determine quest category and theme based on player and context
    const questData = QuestTaskGenerator.generateQuest(player, {
        currentLocation: player.currentLocation,
        playerLevel: player.level,
        playerClass: player.class,
        recentQuests: player.quests ? player.quests.slice(-3) : []
    });

    // Create structured prompt for Gemini with quest template data
    const questPrompt = `
QUEST GENERATION SYSTEM - Generate a detailed, immersive quest for an RPG

PLAYER CONTEXT:
- Name: ${player.name}
- Class: ${player.class}
- Level: ${player.level}
- Current Location: ${player.currentLocation}
- Gold: ${player.gold}
- Recent Activities: ${conversationContext.slice(-500)}

QUEST TEMPLATE DATA:
- Category: ${questData.category}
- Theme: ${questData.theme}  
- Difficulty: ${questData.difficulty}
- Base Title: ${questData.title}
- Base Objective: ${questData.objective}
- Suggested Location: ${questData.location}
- Quest Giver: ${questData.questGiver}

QUEST CATEGORIES REFERENCE:
${JSON.stringify(questCategories, null, 2)}

QUEST THEMES REFERENCE:
${JSON.stringify(questThemes, null, 2)}

WORLD CONTEXT:
- Current NPCs in area: ${getNPCsInLocation(player.currentLocation).map(npc => npc.name).join(', ') || 'None'}
- Player relationships: ${Object.keys(player.relationships || {}).slice(0, 3).join(', ') || 'None established'}

INSTRUCTIONS:
Create a rich, detailed quest that fits the template data but with enhanced narrative depth. The quest should:

1. Have a compelling title that fits the theme
2. Include vivid, immersive description (2-3 sentences)
3. Clear, specific objective that matches the category
4. Interesting complications or plot twists
5. Rewards appropriate to difficulty and player level
6. Consider the player's recent activities and location

Respond with ONLY valid JSON in this exact format:
{
    "title": "Quest Title Here",
    "description": "Rich, immersive description of the quest situation and background",
    "objective": "Clear, specific objective the player must complete",
    "category": "${questData.category}",
    "theme": "${questData.theme}",
    "difficulty": "${questData.difficulty}",
    "location": "Specific location name",
    "questGiver": "Name and brief description of quest giver",
    "rewards": {
        "gold": ${questData.rewards.gold},
        "experience": ${questData.rewards.experience},
        "items": ${JSON.stringify(questData.rewards.items)}
    },
    "requirements": ${JSON.stringify(questData.requirements)},
    "estimatedTime": "${questData.estimatedTime}",
    "complications": "Optional complication or plot twist",
    "questType": "main/side/urgent",
    "moralAlignment": "good/neutral/evil/ambiguous",
    "consequencesOfFailure": "What happens if the quest fails",
    "hiddenSecrets": "Optional hidden elements or revelations"
}

Make the quest feel personal and relevant to ${player.name}'s journey. Use the conversation context to reference recent events or encounters if appropriate.
`;

    try {
        const response = await callGeminiAPI(questPrompt, 0.7, 1000, false);
        if (!response) {
            throw new Error("No response from Gemini API");
        }

        // Parse the JSON response
        const cleanResponse = response.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
        
        if (!jsonMatch) {
            throw new Error("No valid JSON found in response");
        }

        const geminiQuest = JSON.parse(jsonMatch[0]);
        
        // Enhance with additional data and validation
        const enhancedQuest = {
            id: Date.now().toString(),
            title: geminiQuest.title || questData.title,
            description: geminiQuest.description || questData.description,
            objective: geminiQuest.objective || questData.objective,
            category: geminiQuest.category || questData.category,
            theme: geminiQuest.theme || questData.theme,
            difficulty: geminiQuest.difficulty || questData.difficulty,
            location: geminiQuest.location || questData.location,
            questGiver: geminiQuest.questGiver || questData.questGiver,
            rewards: {
                gold: Math.max(0, parseInt(geminiQuest.rewards?.gold) || questData.rewards.gold),
                experience: Math.max(0, parseInt(geminiQuest.rewards?.experience) || questData.rewards.experience),
                items: Array.isArray(geminiQuest.rewards?.items) ? geminiQuest.rewards.items : questData.rewards.items
            },
            requirements: Array.isArray(geminiQuest.requirements) ? geminiQuest.requirements : questData.requirements,
            estimatedTime: geminiQuest.estimatedTime || questData.estimatedTime,
            complications: geminiQuest.complications || questData.complications,
            questType: geminiQuest.questType || 'side',
            moralAlignment: geminiQuest.moralAlignment || 'neutral',
            consequencesOfFailure: geminiQuest.consequencesOfFailure || null,
            hiddenSecrets: geminiQuest.hiddenSecrets || null,
            completed: false,
            dateCreated: new Date().toLocaleDateString()
        };

        console.log('Generated Gemini quest:', enhancedQuest);
        
        // Add to conversation history for future context
        addToConversationHistory('assistant', `New quest generated: ${enhancedQuest.title} - ${enhancedQuest.description}`);
        
        return enhancedQuest;

    } catch (error) {
        console.error("Error generating Gemini quest:", error);
        
        // Fallback to original quest system if Gemini fails
        console.log("Falling back to template-based quest generation");
        return {
            ...questData,
            id: Date.now().toString(),
            completed: false,
            dateCreated: new Date().toLocaleDateString()
        };
    }
}

        'parchment': {
            category: itemCategories.SCROLL,
            rarity: 'UNCOMMON',
            specificName: 'Mysterious Parchment',
            description: 'A rolled-up piece of parchment with faded writing, possibly containing important information.'
        }
    };

    // Check for specific items first
    if (specificItems[name]) {
        return specificItems[name];
    }

    // General categorization
    if (name.includes('helmet') || name.includes('helm') || name.includes('hat')) {
        return { category: itemCategories.ARMOR, rarity: 'COMMON' };
    }
    if (name.includes('sword') || name.includes('blade') || name.includes('dagger')) {
        return { category: itemCategories.WEAPON, rarity: 'COMMON' };
    }
    if (name.includes('armor') || name.includes('jerkin') || name.includes('vest')) {
        return { category: itemCategories.ARMOR, rarity: 'COMMON' };
    }
    if (name.includes('potion') || name.includes('elixir')) {
        return { category: itemCategories.CONSUMABLE, rarity: 'COMMON' };
    }
    if (name.includes('scroll') || name.includes('parchment')) {
        return { category: itemCategories.SCROLL, rarity: 'UNCOMMON' };
    }
    if (name.includes('ring') || name.includes('amulet') || name.includes('necklace')) {
        return { category: itemCategories.JEWELRY, rarity: 'UNCOMMON' };
    }

    // Default to magical item
    return { category: itemCategories.MAGICAL, rarity: 'COMMON' };
}

function parseAIItemResponse(aiResponse, context) {
    try {
        // Extract item details from AI response
        const nameMatch = aiResponse.match(/Item Name:\s*([^|]+)/i);
        const descMatch = aiResponse.match(/Description:\s*([^|]+)/i);
        const typeMatch = aiResponse.match(/Type:\s*([^|]+)/i);
        const rarityMatch = aiResponse.match(/Rarity:\s*([^|]+)/i);

        const itemName = nameMatch ? nameMatch[1].trim() : 'Mysterious Item';
        const description = descMatch ? descMatch[1].trim() : 'A mysterious item of unknown origin.';
        const type = typeMatch ? typeMatch[1].trim().toLowerCase() : 'magical';
        const rarity = rarityMatch ? rarityMatch[1].trim().toUpperCase() : 'UNCOMMON';

        // Detect language type from item name and context
        const detectLanguageType = (name, desc) => {
            const lowerName = name.toLowerCase();
            const lowerDesc = desc.toLowerCase();
            const fullText = lowerName + ' ' + lowerDesc;

            if (fullText.includes('succubus') || fullText.includes('demon') || fullText.includes('infernal')) return 'succubus';
            if (fullText.includes('elven') || fullText.includes('elf') || fullText.includes('elvish')) return 'elven';
            if (fullText.includes('dragon') || fullText.includes('draconic') || fullText.includes('wyrm')) return 'draconic';
            if (fullText.includes('demonic') || fullText.includes('fiend') || fullText.includes('abyss')) return 'demonic';
            if (fullText.includes('celestial') || fullText.includes('angel') || fullText.includes('divine')) return 'celestial';
            if (fullText.includes('orc') || fullText.includes('orcish') || fullText.includes('tribal')) return 'orcish';

            return 'elven'; // Default
        };

        // Check if this is a language-based item
        const isLanguageItem = itemName.toLowerCase().includes('language') ||
            itemName.toLowerCase().includes('script') ||
            itemName.toLowerCase().includes('tome') ||
            itemName.toLowerCase().includes('scroll') ||
            type.includes('scroll') ||
            type.includes('book');

        if (isLanguageItem) {
            const languageType = detectLanguageType(itemName, description);
            const validRarity = Object.keys(itemRarity).includes(rarity) ? rarity : 'UNCOMMON';

            // Generate appropriate language item
            if (type.includes('scroll')) {
                return ItemGenerator.generateLanguageScroll(validRarity, languageType);
            } else {
                return ItemGenerator.generateLanguageBook(validRarity, languageType);
            }
        }

        // Map type to category for non-language items
        let category = itemCategories.MAGICAL;
        if (type.includes('scroll')) category = itemCategories.SCROLL;
        else if (type.includes('book') || type.includes('tome')) category = itemCategories.BOOK;
        else if (type.includes('artifact')) category = itemCategories.ARTIFACT;
        else if (type.includes('weapon')) category = itemCategories.WEAPON;

        // Generate item using the ItemGenerator
        const generatedItem = ItemGenerator.generateItem({
            category: category,
            rarity: Object.keys(itemRarity).includes(rarity) ? rarity : 'UNCOMMON',
            questContext: context.questContext,
            locationContext: context.locationContext
        });

        // Override with AI-generated details
        generatedItem.name = itemName;
        generatedItem.description = description;

        return generatedItem;

    } catch (error) {
        console.error('Error parsing AI item response:', error);
        // Fallback to basic item generation
        return ItemGenerator.generateItem(context);
    }
}
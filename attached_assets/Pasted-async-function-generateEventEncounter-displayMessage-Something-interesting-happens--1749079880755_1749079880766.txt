async function generateEventEncounter() {
    displayMessage("üåü Something interesting happens...", 'exploration');

    const events = [
        'weather_change',
        'mysterious_sign',
        'helpful_spirit',

// Enhanced relationship detection function
function checkRelationshipChanges(playerCommand, aiResponse) {
    const combinedText = (playerCommand + ' ' + aiResponse).toLowerCase();
    
    // Romantic relationship patterns
    const romanticPatterns = [
        /(?:be my|will you be my|become my) (?:girlfriend|boyfriend|partner|lover)/,
        /(?:yes.*(?:girlfriend|boyfriend|partner)|(?:girlfriend|boyfriend|partner).*yes)/,
        /(?:accepted.*(?:proposal|relationship)|agreed.*(?:girlfriend|boyfriend))/,
        /(?:kissed|kiss|romantic|romance|dating|lovers)/,
        /(?:glad to be yours|your (?:girlfriend|boyfriend)|relationship.*established)/
    ];

    // Friend/ally patterns
    const friendshipPatterns = [
        /(?:become friends|best friends|good friends|trusted ally)/,
        /(?:friendship.*established|friends now|alliance.*formed)/,
        /(?:trust.*you|ally.*you|friend.*you)/
    ];

    // Hostile patterns
    const hostilePatterns = [
        /(?:enemy|enemies|hate|despise|hostile|angry)/,
        /(?:betrayed|backstabbed|double.*crossed)/,
        /(?:war|conflict|fight.*you)/
    ];

    // Extract NPC names from the conversation
    const npcNames = extractNPCNames(aiResponse);
    
    npcNames.forEach(npcName => {
        const currentRelationship = player.relationships[npcName];
        let relationshipChanged = false;
        let newStatus = currentRelationship?.status || 'neutral';
        let trustChange = 0;

        // Check for romantic development
        if (romanticPatterns.some(pattern => pattern.test(combinedText))) {
            if (combinedText.includes(npcName.toLowerCase()) || 
                combinedText.includes('mara') || // Special case for current conversation
                aiResponse.toLowerCase().includes('kiss') ||
                aiResponse.toLowerCase().includes('girlfriend') ||
                aiResponse.toLowerCase().includes('yours')) {
                
                newStatus = 'romantic';
                trustChange = 30;
                relationshipChanged = true;
                
                displayMessage(`üíï Your relationship with ${npcName} has blossomed into romance!`, 'success');
            }
        }
        // Check for friendship
        else if (friendshipPatterns.some(pattern => pattern.test(combinedText))) {
            if (newStatus !== 'romantic') { // Don't downgrade from romantic
                newStatus = 'allied';
                trustChange = 15;
                relationshipChanged = true;
                displayMessage(`ü§ù You've become close friends with ${npcName}!`, 'success');
            }
        }
        // Check for hostility
        else if (hostilePatterns.some(pattern => pattern.test(combinedText))) {
            newStatus = 'hostile';
            trustChange = -20;
            relationshipChanged = true;
            displayMessage(`‚öîÔ∏è Your relationship with ${npcName} has turned hostile!`, 'error');
        }

        // Update relationship if changed
        if (relationshipChanged) {
            updateRelationship(npcName, 0, trustChange);
            // Override the status with our detected status
            if (player.relationships[npcName]) {
                player.relationships[npcName].status = newStatus;
            }
            saveGame();
        }
    });
}

// Function to extract NPC names from AI responses
function extractNPCNames(aiResponse) {
    const names = [];
    
    // Known NPCs from conversation history
    const knownNPCs = Object.keys(player.relationships || {});
    
    // Check for known NPCs in the response
    knownNPCs.forEach(name => {
        if (aiResponse.toLowerCase().includes(name.toLowerCase())) {
            names.push(name);
        }
    });
    
    // Common NPC name patterns in the response
    const namePatterns = [
        /([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*?)(?:\s+(?:says|whispers|shouts|laughs|smiles|nods|looks|eyes|face))/g,
        /([A-Z][a-z]+)(?:'s\s+(?:eyes|face|voice|smile|laugh))/g,
        /([A-Z][a-z]+)(?:\s+(?:bursts|leans|wraps|kisses))/g
    ];
    
    namePatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(aiResponse)) !== null) {
            const name = match[1].trim();
            if (name.length > 1 && name.length < 20 && !names.includes(name)) {
                // Exclude common words that might match the pattern
                const excludeWords = ['The', 'A', 'An', 'You', 'Your', 'Game', 'Character', 'Player'];
                if (!excludeWords.includes(name)) {
                    names.push(name);
                }
            }
        }
    });
    
    // Special case: if "Mara" is mentioned, include her
    if (aiResponse.toLowerCase().includes('mara') && !names.includes('Mara')) {
        names.push('Mara');
    }
    
    return [...new Set(names)]; // Remove duplicates
}

        'ancient_relic',
        'crossroads_choice'
    ];

    const eventType = events[Math.floor(Math.random() * events.length)];

    switch (eventType) {
        case 'weather_change':
            const weathers = ['begins to rain', 'clears up beautifully', 'becomes foggy', 'grows windy'];
            const weather = weathers[Math.floor(Math.random() * weathers.length)];
            displayMessage(`üå§Ô∏è The weather ${weather}, affecting your journey.`, 'info');
            break;

        case 'mysterious_sign':
            displayMessage("ü™ß You find a weathered signpost with mysterious directions carved into it.", 'exploration');
            displayMessage("The ancient words seem to point toward hidden paths and secret locations.", 'info');
            break;

        case 'helpful_spirit':
            const hpHeal = Math.floor(player.maxHp * 0.25);
            player.hp = Math.min(player.maxHp, player.hp + hpHeal);
            displayMessage("üëª A benevolent spirit appears and blesses you with healing energy!", 'success');
            displayMessage(`‚ù§Ô∏è You recover ${hpHeal} HP.`, 'success');
            updatePlayerStatsDisplay();
            break;

    }
// Manual fix for Mara relationship (can be called from console)
function fixMaraRelationship() {
    if (!player.relationships) {
        player.relationships = {};
    }
    
    player.relationships['Mara Moneymaker'] = {
        status: 'romantic',
        trust: 85,
        interactions: 5,
        lastInteraction: Date.now()
    };
    
    displayMessage("üíï Relationship with Mara Moneymaker updated to romantic!", 'success');
    saveGame();
    
    // Refresh background display if it's open
    const backgroundInterface = document.getElementById('background-interface');
    if (backgroundInterface && !backgroundInterface.classList.contains('hidden')) {
        displayCharacterBackground();
    }
}

// Auto-fix Mara relationship if we detect she should be romantic but isn't
function autoFixMaraRelationship() {
    const conversationText = conversationHistory.messages.slice(-10).map(m => m.content).join(' ').toLowerCase();
    
    if ((conversationText.includes('mara') && conversationText.includes('girlfriend')) ||
        (conversationText.includes('mara') && conversationText.includes('kiss')) ||
        (conversationText.includes('glad to be yours'))) {
        
        const maraRelationship = player.relationships['Mara Moneymaker'] || player.relationships['Mara'];
        
        if (!maraRelationship || maraRelationship.status !== 'romantic') {
            console.log('Auto-fixing Mara relationship based on conversation history');
            fixMaraRelationship();
        }
    }
}

        case 'ancient_relic':
            displayMessage("üèõÔ∏è You discover the ruins of an ancient structure, worn down by time.", 'exploration');
            displayMessage("Though mostly destroyed, you sense this place once held great significance.", 'info');
            break;

        case 'crossroads_choice':
            displayMessage("üõ§Ô∏è You reach a crossroads with multiple paths branching in different directions.", 'exploration');
            displayMessage("Each path seems to lead to different adventures and opportunities.", 'info');
            break;
    }

    saveGame();
}